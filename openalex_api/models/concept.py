# coding: utf-8

"""
    OpenAlex

    ![](https://raw.githubusercontent.com/ourresearch/openalex-docs/main/.gitbook/assets/OpenAlex-logo-5.png)  **OpenAlex** is a fully open catalog of the global research system.  It's named after the [ancient Library of Alexandria](https://en.wikipedia.org/wiki/Library_of_Alexandria) and made by the nonprofit [OurResearch](https://ourresearch.org/).  ## OpenAPI Specification  [Mearman/openalex-api-spec](https://github.com/Mearman/openalex-api-spec)  This OpenAPI specification is reverse-engineered and derived from spec generated by [openapi-devtools](https://github.com/AndrewWalsh/openapi-devtools).  The specification document itself is OpenAPI version 3.1 and is generated from TypeScript source code.  [![Open in](https://img.shields.io/badge/Open%20in-Swagger%20UI-85EA2D?style=for-the-badge&logo=Swagger&link=https://mearman.github.io/openalex-swagger-ui-react/)](https://mearman.github.io/openalex-swagger-ui-react/)  **[Releases](https://github.com/Mearman/openalex-api-spec/releases)**  ## Clients  [![TypeScript](https://img.shields.io/badge/TypeScript-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript)](https://github.com/Mearman/openalex-typescript)  [![TypeScript Fetch](https://img.shields.io/badge/TypeScript%20Fetch-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript-fetch)](https://github.com/Mearman/openalex-typescript-fetch)  [![TypeScript Node](https://img.shields.io/badge/TypeScript%20Node-339933?style=for-the-badge&logo=Node.js&logoColor=white&link=https://github.com/Mearman/openalex-typescript-node)](https://github.com/Mearman/openalex-typescript-node)  [![Python](https://img.shields.io/badge/Python-3776AB?style=for-the-badge&logo=Python&logoColor=white&link=https://github.com/Mearman/openalex-python)](https://github.com/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-CodeSpaces-181717?style=for-the-badge&logo=GitHub&link=https://codespaces.new/Mearman/openalex-python)](https://codespaces.new/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-Colab-F9AB00?style=for-the-badge&logo=Google%20Colab&link=https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)](https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)  ---

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field
from openalex_api.models.concept_ids import ConceptIds
from openalex_api.models.international_display_name_and_description import InternationalDisplayNameAndDescription
from openalex_api.models.summary_stats import SummaryStats

class Concept(BaseModel):
    """
    Concept
    """
    ancestors: Optional[Any] = None
    cited_by_count: Optional[Any] = None
    counts_by_year: Optional[Any] = None
    created_date: Optional[Any] = None
    description: Optional[Any] = None
    display_name: Optional[Any] = Field(...)
    id: Optional[Any] = Field(...)
    ids: Optional[ConceptIds] = None
    image_thumbnail_url: Optional[Any] = None
    image_url: Optional[Any] = None
    international: Optional[InternationalDisplayNameAndDescription] = None
    level: Optional[Any] = None
    related_concepts: Optional[Any] = None
    summary_stats: Optional[SummaryStats] = None
    updated_date: Optional[Any] = None
    wikidata: Optional[Any] = None
    works_api_url: Optional[Any] = None
    works_count: Optional[Any] = None
    __properties = ["ancestors", "cited_by_count", "counts_by_year", "created_date", "description", "display_name", "id", "ids", "image_thumbnail_url", "image_url", "international", "level", "related_concepts", "summary_stats", "updated_date", "wikidata", "works_api_url", "works_count"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Concept:
        """Create an instance of Concept from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of ids
        if self.ids:
            _dict['ids'] = self.ids.to_dict()
        # override the default output from pydantic by calling `to_dict()` of international
        if self.international:
            _dict['international'] = self.international.to_dict()
        # override the default output from pydantic by calling `to_dict()` of summary_stats
        if self.summary_stats:
            _dict['summary_stats'] = self.summary_stats.to_dict()
        # set to None if ancestors (nullable) is None
        # and __fields_set__ contains the field
        if self.ancestors is None and "ancestors" in self.__fields_set__:
            _dict['ancestors'] = None

        # set to None if cited_by_count (nullable) is None
        # and __fields_set__ contains the field
        if self.cited_by_count is None and "cited_by_count" in self.__fields_set__:
            _dict['cited_by_count'] = None

        # set to None if counts_by_year (nullable) is None
        # and __fields_set__ contains the field
        if self.counts_by_year is None and "counts_by_year" in self.__fields_set__:
            _dict['counts_by_year'] = None

        # set to None if created_date (nullable) is None
        # and __fields_set__ contains the field
        if self.created_date is None and "created_date" in self.__fields_set__:
            _dict['created_date'] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if display_name (nullable) is None
        # and __fields_set__ contains the field
        if self.display_name is None and "display_name" in self.__fields_set__:
            _dict['display_name'] = None

        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if image_thumbnail_url (nullable) is None
        # and __fields_set__ contains the field
        if self.image_thumbnail_url is None and "image_thumbnail_url" in self.__fields_set__:
            _dict['image_thumbnail_url'] = None

        # set to None if image_url (nullable) is None
        # and __fields_set__ contains the field
        if self.image_url is None and "image_url" in self.__fields_set__:
            _dict['image_url'] = None

        # set to None if level (nullable) is None
        # and __fields_set__ contains the field
        if self.level is None and "level" in self.__fields_set__:
            _dict['level'] = None

        # set to None if related_concepts (nullable) is None
        # and __fields_set__ contains the field
        if self.related_concepts is None and "related_concepts" in self.__fields_set__:
            _dict['related_concepts'] = None

        # set to None if updated_date (nullable) is None
        # and __fields_set__ contains the field
        if self.updated_date is None and "updated_date" in self.__fields_set__:
            _dict['updated_date'] = None

        # set to None if wikidata (nullable) is None
        # and __fields_set__ contains the field
        if self.wikidata is None and "wikidata" in self.__fields_set__:
            _dict['wikidata'] = None

        # set to None if works_api_url (nullable) is None
        # and __fields_set__ contains the field
        if self.works_api_url is None and "works_api_url" in self.__fields_set__:
            _dict['works_api_url'] = None

        # set to None if works_count (nullable) is None
        # and __fields_set__ contains the field
        if self.works_count is None and "works_count" in self.__fields_set__:
            _dict['works_count'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Concept:
        """Create an instance of Concept from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Concept.parse_obj(obj)

        _obj = Concept.parse_obj({
            "ancestors": obj.get("ancestors"),
            "cited_by_count": obj.get("cited_by_count"),
            "counts_by_year": obj.get("counts_by_year"),
            "created_date": obj.get("created_date"),
            "description": obj.get("description"),
            "display_name": obj.get("display_name"),
            "id": obj.get("id"),
            "ids": ConceptIds.from_dict(obj.get("ids")) if obj.get("ids") is not None else None,
            "image_thumbnail_url": obj.get("image_thumbnail_url"),
            "image_url": obj.get("image_url"),
            "international": InternationalDisplayNameAndDescription.from_dict(obj.get("international")) if obj.get("international") is not None else None,
            "level": obj.get("level"),
            "related_concepts": obj.get("related_concepts"),
            "summary_stats": SummaryStats.from_dict(obj.get("summary_stats")) if obj.get("summary_stats") is not None else None,
            "updated_date": obj.get("updated_date"),
            "wikidata": obj.get("wikidata"),
            "works_api_url": obj.get("works_api_url"),
            "works_count": obj.get("works_count")
        })
        return _obj


