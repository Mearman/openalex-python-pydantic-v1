# coding: utf-8

"""
    OpenAlex

    ![](https://raw.githubusercontent.com/ourresearch/openalex-docs/main/.gitbook/assets/OpenAlex-logo-5.png)  **OpenAlex** is a fully open catalog of the global research system.  It's named after the [ancient Library of Alexandria](https://en.wikipedia.org/wiki/Library_of_Alexandria) and made by the nonprofit [OurResearch](https://ourresearch.org/).  ## OpenAPI Specification  [Mearman/openalex-api-spec](https://github.com/Mearman/openalex-api-spec)  This OpenAPI specification is reverse-engineered and derived from spec generated by [openapi-devtools](https://github.com/AndrewWalsh/openapi-devtools).  The specification document itself is OpenAPI version 3.1 and is generated from TypeScript source code.  [![Open in](https://img.shields.io/badge/Open%20in-Swagger%20UI-85EA2D?style=for-the-badge&logo=Swagger&link=https://mearman.github.io/openalex-swagger-ui-react/)](https://mearman.github.io/openalex-swagger-ui-react/)  **[Releases](https://github.com/Mearman/openalex-api-spec/releases)**  ## Clients  [![TypeScript](https://img.shields.io/badge/TypeScript-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript)](https://github.com/Mearman/openalex-typescript)  [![TypeScript Fetch](https://img.shields.io/badge/TypeScript%20Fetch-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript-fetch)](https://github.com/Mearman/openalex-typescript-fetch)  [![TypeScript Node](https://img.shields.io/badge/TypeScript%20Node-339933?style=for-the-badge&logo=Node.js&logoColor=white&link=https://github.com/Mearman/openalex-typescript-node)](https://github.com/Mearman/openalex-typescript-node)  [![Python](https://img.shields.io/badge/Python-3776AB?style=for-the-badge&logo=Python&logoColor=white&link=https://github.com/Mearman/openalex-python)](https://github.com/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-CodeSpaces-181717?style=for-the-badge&logo=GitHub&link=https://codespaces.new/Mearman/openalex-python)](https://codespaces.new/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-Colab-F9AB00?style=for-the-badge&logo=Google%20Colab&link=https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)](https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)  ---

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel
from openalex_api.models.location_source import LocationSource

class Location(BaseModel):
    """
    Location
    """
    is_accepted: Optional[Any] = None
    is_oa: Optional[Any] = None
    is_published: Optional[Any] = None
    landing_page_url: Optional[Any] = None
    license: Optional[Any] = None
    pdf_url: Optional[Any] = None
    source: Optional[LocationSource] = None
    version: Optional[Any] = None
    __properties = ["is_accepted", "is_oa", "is_published", "landing_page_url", "license", "pdf_url", "source", "version"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Location:
        """Create an instance of Location from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # set to None if is_accepted (nullable) is None
        # and __fields_set__ contains the field
        if self.is_accepted is None and "is_accepted" in self.__fields_set__:
            _dict['is_accepted'] = None

        # set to None if is_oa (nullable) is None
        # and __fields_set__ contains the field
        if self.is_oa is None and "is_oa" in self.__fields_set__:
            _dict['is_oa'] = None

        # set to None if is_published (nullable) is None
        # and __fields_set__ contains the field
        if self.is_published is None and "is_published" in self.__fields_set__:
            _dict['is_published'] = None

        # set to None if landing_page_url (nullable) is None
        # and __fields_set__ contains the field
        if self.landing_page_url is None and "landing_page_url" in self.__fields_set__:
            _dict['landing_page_url'] = None

        # set to None if license (nullable) is None
        # and __fields_set__ contains the field
        if self.license is None and "license" in self.__fields_set__:
            _dict['license'] = None

        # set to None if pdf_url (nullable) is None
        # and __fields_set__ contains the field
        if self.pdf_url is None and "pdf_url" in self.__fields_set__:
            _dict['pdf_url'] = None

        # set to None if version (nullable) is None
        # and __fields_set__ contains the field
        if self.version is None and "version" in self.__fields_set__:
            _dict['version'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Location:
        """Create an instance of Location from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Location.parse_obj(obj)

        _obj = Location.parse_obj({
            "is_accepted": obj.get("is_accepted"),
            "is_oa": obj.get("is_oa"),
            "is_published": obj.get("is_published"),
            "landing_page_url": obj.get("landing_page_url"),
            "license": obj.get("license"),
            "pdf_url": obj.get("pdf_url"),
            "source": LocationSource.from_dict(obj.get("source")) if obj.get("source") is not None else None,
            "version": obj.get("version")
        })
        return _obj


