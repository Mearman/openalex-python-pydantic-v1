# coding: utf-8

"""
    OpenAlex

    ![](https://raw.githubusercontent.com/ourresearch/openalex-docs/main/.gitbook/assets/OpenAlex-logo-5.png)  **OpenAlex** is a fully open catalog of the global research system.  It's named after the [ancient Library of Alexandria](https://en.wikipedia.org/wiki/Library_of_Alexandria) and made by the nonprofit [OurResearch](https://ourresearch.org/).  ## OpenAPI Specification  [Mearman/openalex-api-spec](https://github.com/Mearman/openalex-api-spec)  This OpenAPI specification is reverse-engineered and derived from spec generated by [openapi-devtools](https://github.com/AndrewWalsh/openapi-devtools).  The specification document itself is OpenAPI version 3.1 and is generated from TypeScript source code.  [![Open in](https://img.shields.io/badge/Open%20in-Swagger%20UI-85EA2D?style=for-the-badge&logo=Swagger&link=https://mearman.github.io/openalex-swagger-ui-react/)](https://mearman.github.io/openalex-swagger-ui-react/)  **[Releases](https://github.com/Mearman/openalex-api-spec/releases)**  ## Clients  [![TypeScript](https://img.shields.io/badge/TypeScript-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript)](https://github.com/Mearman/openalex-typescript)  [![TypeScript Fetch](https://img.shields.io/badge/TypeScript%20Fetch-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript-fetch)](https://github.com/Mearman/openalex-typescript-fetch)  [![TypeScript Node](https://img.shields.io/badge/TypeScript%20Node-339933?style=for-the-badge&logo=Node.js&logoColor=white&link=https://github.com/Mearman/openalex-typescript-node)](https://github.com/Mearman/openalex-typescript-node)  [![Python](https://img.shields.io/badge/Python-3776AB?style=for-the-badge&logo=Python&logoColor=white&link=https://github.com/Mearman/openalex-python)](https://github.com/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-CodeSpaces-181717?style=for-the-badge&logo=GitHub&link=https://codespaces.new/Mearman/openalex-python)](https://codespaces.new/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-Colab-F9AB00?style=for-the-badge&logo=Google%20Colab&link=https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)](https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)  ---

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import json
import pprint
import re  # noqa: F401
from aenum import Enum, no_arg





class WorkAttributes(str, Enum):
    """
    WorkAttributes
    """

    """
    allowed enum values
    """
    ABSTRACT_INVERTED_INDEX = 'abstract_inverted_index'
    APC_LIST = 'apc_list'
    APC_PAID = 'apc_paid'
    AUTHORSHIPS = 'authorships'
    BEST_OA_LOCATION = 'best_oa_location'
    BIBLIO = 'biblio'
    CITED_BY_API_URL = 'cited_by_api_url'
    CITED_BY_COUNT = 'cited_by_count'
    CITED_BY_PERCENTILE_YEAR = 'cited_by_percentile_year'
    CONCEPTS = 'concepts'
    CORRESPONDING_AUTHOR_IDS = 'corresponding_author_ids'
    CORRESPONDING_INSTITUTION_IDS = 'corresponding_institution_ids'
    COUNTRIES_DISTINCT_COUNT = 'countries_distinct_count'
    COUNTS_BY_YEAR = 'counts_by_year'
    CREATED_DATE = 'created_date'
    DOI = 'doi'
    FULLTEXT_ORIGIN = 'fulltext_origin'
    GRANTS = 'grants'
    HAS_FULLTEXT = 'has_fulltext'
    IDS = 'ids'
    INSTITUTIONS_DISTINCT_COUNT = 'institutions_distinct_count'
    IS_AUTHORS_TRUNCATED = 'is_authors_truncated'
    IS_PARATEXT = 'is_paratext'
    IS_RETRACTED = 'is_retracted'
    KEYWORDS = 'keywords'
    LANGUAGE = 'language'
    LOCATIONS_COUNT = 'locations_count'
    LOCATIONS = 'locations'
    MESH = 'mesh'
    NGRAMS_URL = 'ngrams_url'
    OPEN_ACCESS = 'open_access'
    PRIMARY_LOCATION = 'primary_location'
    PUBLICATION_DATE = 'publication_date'
    PUBLICATION_YEAR = 'publication_year'
    REFERENCED_WORKS_COUNT = 'referenced_works_count'
    REFERENCED_WORKS = 'referenced_works'
    RELATED_WORKS = 'related_works'
    RELEVANCE_SCORE = 'relevance_score'
    SUSTAINABLE_DEVELOPMENT_GOALS = 'sustainable_development_goals'
    TITLE = 'title'
    TYPE_CROSSREF = 'type_crossref'
    TYPE = 'type'
    UPDATED_DATE = 'updated_date'

    @classmethod
    def from_json(cls, json_str: str) -> WorkAttributes:
        """Create an instance of WorkAttributes from a JSON string"""
        return WorkAttributes(json.loads(json_str))


