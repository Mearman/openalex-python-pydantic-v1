# coding: utf-8

"""
    OpenAlex

    ![](https://raw.githubusercontent.com/ourresearch/openalex-docs/main/.gitbook/assets/OpenAlex-logo-5.png)  **OpenAlex** is a fully open catalog of the global research system.  It's named after the [ancient Library of Alexandria](https://en.wikipedia.org/wiki/Library_of_Alexandria) and made by the nonprofit [OurResearch](https://ourresearch.org/).  ## OpenAPI Specification  [Mearman/openalex-api-spec](https://github.com/Mearman/openalex-api-spec)  This OpenAPI specification is reverse-engineered and derived from spec generated by [openapi-devtools](https://github.com/AndrewWalsh/openapi-devtools).  The specification document itself is OpenAPI version 3.1 and is generated from TypeScript source code.  [![Open in](https://img.shields.io/badge/Open%20in-Swagger%20UI-85EA2D?style=for-the-badge&logo=Swagger&link=https://mearman.github.io/openalex-swagger-ui-react/)](https://mearman.github.io/openalex-swagger-ui-react/)  **[Releases](https://github.com/Mearman/openalex-api-spec/releases)**  ## Clients  [![TypeScript](https://img.shields.io/badge/TypeScript-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript)](https://github.com/Mearman/openalex-typescript)  [![TypeScript Fetch](https://img.shields.io/badge/TypeScript%20Fetch-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript-fetch)](https://github.com/Mearman/openalex-typescript-fetch)  [![TypeScript Node](https://img.shields.io/badge/TypeScript%20Node-339933?style=for-the-badge&logo=Node.js&logoColor=white&link=https://github.com/Mearman/openalex-typescript-node)](https://github.com/Mearman/openalex-typescript-node)  [![Python](https://img.shields.io/badge/Python-3776AB?style=for-the-badge&logo=Python&logoColor=white&link=https://github.com/Mearman/openalex-python)](https://github.com/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-CodeSpaces-181717?style=for-the-badge&logo=GitHub&link=https://codespaces.new/Mearman/openalex-python)](https://codespaces.new/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-Colab-F9AB00?style=for-the-badge&logo=Google%20Colab&link=https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)](https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)  ---

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from openalex_api.models.authorships_inner_author import AuthorshipsInnerAuthor
from openalex_api.models.authorships_inner_institutions_inner import AuthorshipsInnerInstitutionsInner

class AuthorshipsInner(BaseModel):
    """
    AuthorshipsInner
    """
    author: AuthorshipsInnerAuthor = Field(...)
    author_position: StrictStr = Field(...)
    countries: conlist(StrictStr) = Field(...)
    institutions: conlist(AuthorshipsInnerInstitutionsInner) = Field(...)
    is_corresponding: StrictBool = Field(...)
    raw_affiliation_string: Optional[StrictStr] = None
    raw_affiliation_strings: conlist(StrictStr) = Field(...)
    raw_author_name: StrictStr = Field(...)
    __properties = ["author", "author_position", "countries", "institutions", "is_corresponding", "raw_affiliation_string", "raw_affiliation_strings", "raw_author_name"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AuthorshipsInner:
        """Create an instance of AuthorshipsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in institutions (list)
        _items = []
        if self.institutions:
            for _item in self.institutions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['institutions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AuthorshipsInner:
        """Create an instance of AuthorshipsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AuthorshipsInner.parse_obj(obj)

        _obj = AuthorshipsInner.parse_obj({
            "author": AuthorshipsInnerAuthor.from_dict(obj.get("author")) if obj.get("author") is not None else None,
            "author_position": obj.get("author_position"),
            "countries": obj.get("countries"),
            "institutions": [AuthorshipsInnerInstitutionsInner.from_dict(_item) for _item in obj.get("institutions")] if obj.get("institutions") is not None else None,
            "is_corresponding": obj.get("is_corresponding"),
            "raw_affiliation_string": obj.get("raw_affiliation_string"),
            "raw_affiliation_strings": obj.get("raw_affiliation_strings"),
            "raw_author_name": obj.get("raw_author_name")
        })
        return _obj


