# coding: utf-8

"""
    OpenAlex

    ![](https://raw.githubusercontent.com/ourresearch/openalex-docs/main/.gitbook/assets/OpenAlex-logo-5.png)  **OpenAlex** is a fully open catalog of the global research system.  It's named after the [ancient Library of Alexandria](https://en.wikipedia.org/wiki/Library_of_Alexandria) and made by the nonprofit [OurResearch](https://ourresearch.org/).  ## OpenAPI Specification  [Mearman/openalex-api-spec](https://github.com/Mearman/openalex-api-spec)  This OpenAPI specification is reverse-engineered and derived from spec generated by [openapi-devtools](https://github.com/AndrewWalsh/openapi-devtools).  The specification document itself is OpenAPI version 3.1 and is generated from TypeScript source code.  [![Open in](https://img.shields.io/badge/Open%20in-Swagger%20UI-85EA2D?style=for-the-badge&logo=Swagger&link=https://mearman.github.io/openalex-swagger-ui-react/)](https://mearman.github.io/openalex-swagger-ui-react/)  **[Releases](https://github.com/Mearman/openalex-api-spec/releases)**  ## Clients  [![TypeScript](https://img.shields.io/badge/TypeScript-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript)](https://github.com/Mearman/openalex-typescript)  [![TypeScript Fetch](https://img.shields.io/badge/TypeScript%20Fetch-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript-fetch)](https://github.com/Mearman/openalex-typescript-fetch)  [![TypeScript Node](https://img.shields.io/badge/TypeScript%20Node-339933?style=for-the-badge&logo=Node.js&logoColor=white&link=https://github.com/Mearman/openalex-typescript-node)](https://github.com/Mearman/openalex-typescript-node)  [![Python](https://img.shields.io/badge/Python-3776AB?style=for-the-badge&logo=Python&logoColor=white&link=https://github.com/Mearman/openalex-python)](https://github.com/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-CodeSpaces-181717?style=for-the-badge&logo=GitHub&link=https://codespaces.new/Mearman/openalex-python)](https://codespaces.new/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-Colab-F9AB00?style=for-the-badge&logo=Google%20Colab&link=https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)](https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)  ---

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from openalex_api.models.counts_by_year_inner import CountsByYearInner
from openalex_api.models.ids import Ids
from openalex_api.models.role import Role
from openalex_api.models.summary_stats import SummaryStats

class Funder(BaseModel):
    """
    Funder
    """
    alternate_titles: conlist(StrictStr) = Field(...)
    cited_by_count: Optional[StrictInt] = None
    country_code: Optional[StrictStr] = None
    counts_by_year: Optional[conlist(CountsByYearInner)] = None
    created_date: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    display_name: StrictStr = Field(...)
    grants_count: Optional[StrictInt] = None
    homepage_url: Optional[StrictStr] = None
    id: StrictStr = Field(...)
    ids: Optional[Ids] = None
    image_thumbnail_url: Optional[StrictStr] = None
    image_url: Optional[StrictStr] = None
    relevance_score: Optional[Union[StrictFloat, StrictInt]] = None
    roles: Optional[conlist(Role)] = None
    summary_stats: Optional[SummaryStats] = None
    updated_date: Optional[StrictStr] = None
    works_count: Optional[StrictInt] = None
    __properties = ["alternate_titles", "cited_by_count", "country_code", "counts_by_year", "created_date", "description", "display_name", "grants_count", "homepage_url", "id", "ids", "image_thumbnail_url", "image_url", "relevance_score", "roles", "summary_stats", "updated_date", "works_count"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Funder:
        """Create an instance of Funder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in counts_by_year (list)
        _items = []
        if self.counts_by_year:
            for _item in self.counts_by_year:
                if _item:
                    _items.append(_item.to_dict())
            _dict['counts_by_year'] = _items
        # override the default output from pydantic by calling `to_dict()` of ids
        if self.ids:
            _dict['ids'] = self.ids.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in roles (list)
        _items = []
        if self.roles:
            for _item in self.roles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['roles'] = _items
        # override the default output from pydantic by calling `to_dict()` of summary_stats
        if self.summary_stats:
            _dict['summary_stats'] = self.summary_stats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Funder:
        """Create an instance of Funder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Funder.parse_obj(obj)

        _obj = Funder.parse_obj({
            "alternate_titles": obj.get("alternate_titles"),
            "cited_by_count": obj.get("cited_by_count"),
            "country_code": obj.get("country_code"),
            "counts_by_year": [CountsByYearInner.from_dict(_item) for _item in obj.get("counts_by_year")] if obj.get("counts_by_year") is not None else None,
            "created_date": obj.get("created_date"),
            "description": obj.get("description"),
            "display_name": obj.get("display_name"),
            "grants_count": obj.get("grants_count"),
            "homepage_url": obj.get("homepage_url"),
            "id": obj.get("id"),
            "ids": Ids.from_dict(obj.get("ids")) if obj.get("ids") is not None else None,
            "image_thumbnail_url": obj.get("image_thumbnail_url"),
            "image_url": obj.get("image_url"),
            "relevance_score": obj.get("relevance_score"),
            "roles": [Role.from_dict(_item) for _item in obj.get("roles")] if obj.get("roles") is not None else None,
            "summary_stats": SummaryStats.from_dict(obj.get("summary_stats")) if obj.get("summary_stats") is not None else None,
            "updated_date": obj.get("updated_date"),
            "works_count": obj.get("works_count")
        })
        return _obj


