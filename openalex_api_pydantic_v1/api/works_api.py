# coding: utf-8

"""
    OpenAlex

    ![](https://raw.githubusercontent.com/ourresearch/openalex-docs/main/.gitbook/assets/OpenAlex-logo-5.png)  **OpenAlex** is a fully open catalog of the global research system.  It's named after the [ancient Library of Alexandria](https://en.wikipedia.org/wiki/Library_of_Alexandria) and made by the nonprofit [OurResearch](https://ourresearch.org/).  ## OpenAPI Specification  [Mearman/openalex-api-spec](https://github.com/Mearman/openalex-api-spec)  This OpenAPI specification is reverse-engineered and derived from spec generated by [openapi-devtools](https://github.com/AndrewWalsh/openapi-devtools).  The specification document itself is OpenAPI version 3.1 and is generated from TypeScript source code.  [![Open in](https://img.shields.io/badge/Open%20in-Swagger%20UI-85EA2D?style=for-the-badge&logo=Swagger&link=https://mearman.github.io/openalex-swagger-ui-react/)](https://mearman.github.io/openalex-swagger-ui-react/)  **[Releases](https://github.com/Mearman/openalex-api-spec/releases)**  ## Clients  [![TypeScript](https://img.shields.io/badge/TypeScript-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript)](https://github.com/Mearman/openalex-typescript)  [![TypeScript Fetch](https://img.shields.io/badge/TypeScript%20Fetch-3178C6?style=for-the-badge&logo=TypeScript&logoColor=white&link=https://github.com/Mearman/openalex-typescript-fetch)](https://github.com/Mearman/openalex-typescript-fetch)  [![TypeScript Node](https://img.shields.io/badge/TypeScript%20Node-339933?style=for-the-badge&logo=Node.js&logoColor=white&link=https://github.com/Mearman/openalex-typescript-node)](https://github.com/Mearman/openalex-typescript-node)  [![Python](https://img.shields.io/badge/Python-3776AB?style=for-the-badge&logo=Python&logoColor=white&link=https://github.com/Mearman/openalex-python)](https://github.com/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-CodeSpaces-181717?style=for-the-badge&logo=GitHub&link=https://codespaces.new/Mearman/openalex-python)](https://codespaces.new/Mearman/openalex-python) [![Open in](https://img.shields.io/badge/Open%20in-Colab-F9AB00?style=for-the-badge&logo=Google%20Colab&link=https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)](https://colab.research.google.com/github/Mearman/openalex-python/blob/main/README.ipynb)  ---

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictInt, StrictStr

from typing import Any, Optional

from openalex_api_pydantic_v1.models.auto_complete_result_schema import AutoCompleteResultSchema
from openalex_api_pydantic_v1.models.work_ngrams_schema import WorkNgramsSchema
from openalex_api_pydantic_v1.models.work_schema import WorkSchema
from openalex_api_pydantic_v1.models.works_response_schema import WorksResponseSchema

from openalex_api_pydantic_v1.api_client import ApiClient
from openalex_api_pydantic_v1.api_response import ApiResponse
from openalex_api_pydantic_v1.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class WorksApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_autocomplete_works(self, filter : Optional[StrictStr] = None, search : Optional[StrictStr] = None, q : Optional[StrictStr] = None, user_agent : Annotated[Optional[Any], Field(description="[docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool)")] = None, mailto : Annotated[Optional[Any], Field(description="The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day. For best performance, add your email to all API requests The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`. Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).")] = None, **kwargs) -> AutoCompleteResultSchema:  # noqa: E501
        """/autocomplete/works  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_autocomplete_works(filter, search, q, user_agent, mailto, async_req=True)
        >>> result = thread.get()

        :param filter:
        :type filter: str
        :param search:
        :type search: str
        :param q:
        :type q: str
        :param user_agent: [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool)
        :type user_agent: object
        :param mailto: The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day. For best performance, add your email to all API requests The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`. Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
        :type mailto: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AutoCompleteResultSchema
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_autocomplete_works_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_autocomplete_works_with_http_info(filter, search, q, user_agent, mailto, **kwargs)  # noqa: E501

    @validate_arguments
    def get_autocomplete_works_with_http_info(self, filter : Optional[StrictStr] = None, search : Optional[StrictStr] = None, q : Optional[StrictStr] = None, user_agent : Annotated[Optional[Any], Field(description="[docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool)")] = None, mailto : Annotated[Optional[Any], Field(description="The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day. For best performance, add your email to all API requests The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`. Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """/autocomplete/works  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_autocomplete_works_with_http_info(filter, search, q, user_agent, mailto, async_req=True)
        >>> result = thread.get()

        :param filter:
        :type filter: str
        :param search:
        :type search: str
        :param q:
        :type q: str
        :param user_agent: [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool)
        :type user_agent: object
        :param mailto: The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day. For best performance, add your email to all API requests The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`. Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
        :type mailto: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AutoCompleteResultSchema, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'filter',
            'search',
            'q',
            'user_agent',
            'mailto'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_autocomplete_works" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('filter') is not None:  # noqa: E501
            _query_params.append(('filter', _params['filter']))

        if _params.get('search') is not None:  # noqa: E501
            _query_params.append(('search', _params['search']))

        if _params.get('q') is not None:  # noqa: E501
            _query_params.append(('q', _params['q']))

        if _params.get('mailto') is not None:  # noqa: E501
            _query_params.append(('mailto', _params['mailto']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['user_agent'] is not None:
            _header_params['User-Agent'] = _params['user_agent']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "AutoCompleteResultSchema",
            '403': "ErrorMessage",
        }

        return self.api_client.call_api(
            '/autocomplete/works', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_work(self, id : Annotated[Any, Field(..., description="The id of the work to retrieve")], select : Optional[Any] = None, user_agent : Annotated[Optional[Any], Field(description="[docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool)")] = None, mailto : Annotated[Optional[Any], Field(description="The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day. For best performance, add your email to all API requests The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`. Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).")] = None, **kwargs) -> WorkSchema:  # noqa: E501
        """/works/{id}  # noqa: E501

        Get a single work by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_work(id, select, user_agent, mailto, async_req=True)
        >>> result = thread.get()

        :param id: The id of the work to retrieve (required)
        :type id: object
        :param select:
        :type select: object
        :param user_agent: [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool)
        :type user_agent: object
        :param mailto: The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day. For best performance, add your email to all API requests The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`. Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
        :type mailto: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WorkSchema
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_work_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_work_with_http_info(id, select, user_agent, mailto, **kwargs)  # noqa: E501

    @validate_arguments
    def get_work_with_http_info(self, id : Annotated[Any, Field(..., description="The id of the work to retrieve")], select : Optional[Any] = None, user_agent : Annotated[Optional[Any], Field(description="[docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool)")] = None, mailto : Annotated[Optional[Any], Field(description="The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day. For best performance, add your email to all API requests The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`. Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """/works/{id}  # noqa: E501

        Get a single work by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_work_with_http_info(id, select, user_agent, mailto, async_req=True)
        >>> result = thread.get()

        :param id: The id of the work to retrieve (required)
        :type id: object
        :param select:
        :type select: object
        :param user_agent: [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool)
        :type user_agent: object
        :param mailto: The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day. For best performance, add your email to all API requests The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`. Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
        :type mailto: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WorkSchema, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'select',
            'user_agent',
            'mailto'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_work" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('select') is not None:  # noqa: E501
            _query_params.append(('select', _params['select']))

        if _params.get('mailto') is not None:  # noqa: E501
            _query_params.append(('mailto', _params['mailto']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['user_agent'] is not None:
            _header_params['User-Agent'] = _params['user_agent']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "WorkSchema",
            '403': "ErrorMessage",
        }

        return self.api_client.call_api(
            '/works/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_work_ngrams(self, id : Any, user_agent : Annotated[Optional[Any], Field(description="[docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool)")] = None, mailto : Annotated[Optional[Any], Field(description="The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day. For best performance, add your email to all API requests The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`. Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).")] = None, **kwargs) -> WorkNgramsSchema:  # noqa: E501
        """/works/{id}/ngrams  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_work_ngrams(id, user_agent, mailto, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: object
        :param user_agent: [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool)
        :type user_agent: object
        :param mailto: The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day. For best performance, add your email to all API requests The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`. Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
        :type mailto: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WorkNgramsSchema
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_work_ngrams_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_work_ngrams_with_http_info(id, user_agent, mailto, **kwargs)  # noqa: E501

    @validate_arguments
    def get_work_ngrams_with_http_info(self, id : Any, user_agent : Annotated[Optional[Any], Field(description="[docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool)")] = None, mailto : Annotated[Optional[Any], Field(description="The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day. For best performance, add your email to all API requests The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`. Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """/works/{id}/ngrams  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_work_ngrams_with_http_info(id, user_agent, mailto, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: object
        :param user_agent: [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool)
        :type user_agent: object
        :param mailto: The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day. For best performance, add your email to all API requests The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`. Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
        :type mailto: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WorkNgramsSchema, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'user_agent',
            'mailto'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_work_ngrams" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('mailto') is not None:  # noqa: E501
            _query_params.append(('mailto', _params['mailto']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['user_agent'] is not None:
            _header_params['User-Agent'] = _params['user_agent']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "WorkNgramsSchema",
            '403': "ErrorMessage",
        }

        return self.api_client.call_api(
            '/works/{id}/ngrams', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_works(self, api_key : Optional[StrictStr] = None, cursor : Optional[StrictStr] = None, group_by : Optional[StrictStr] = None, page : Optional[StrictInt] = None, per_page : Optional[StrictInt] = None, sample : Optional[StrictInt] = None, search : Optional[StrictStr] = None, seed : Optional[Any] = None, select : Optional[StrictStr] = None, sort : Optional[StrictStr] = None, filter : Annotated[Optional[Any], Field(description="Filter works by a specific field. See the [filter works](https://docs.openalex.org/api-entities/works/filter-works) documentation for more information. Valid filters are:   - `abstract.search` - `apc_list.currency` - `apc_list.provenance` - `apc_list.value` - `apc_list.value_usd` - `apc_paid.currency` - `apc_paid.provenance` - `apc_paid.value` - `apc_paid.value_usd` - `author.id` - `author.orcid` - `authors_count` - `authorships.author.id` - `authorships.author.orcid` - `authorships.countries` - `authorships.institutions.continent` - `authorships.institutions.country_code` - `authorships.institutions.id` - `authorships.institutions.is_global_south` - `authorships.institutions.lineage` - `authorships.institutions.ror` - `authorships.institutions.type` - `authorships.is_corresponding` - `best_oa_location.is_accepted` - `best_oa_location.is_oa` - `best_oa_location.is_published` - `best_oa_location.landing_page_url` - `best_oa_location.license` - `best_oa_location.source.host_organization` - `best_oa_location.source.host_organization_lineage` - `best_oa_location.source.id` - `best_oa_location.source.is_in_doaj` - `best_oa_location.source.is_oa` - `best_oa_location.source.issn` - `best_oa_location.source.type` - `best_oa_location.version` - `best_open_version` - `cited_by` - `cited_by_count` - `cited_by_percentile_year.max` - `cited_by_percentile_year.min` - `cites` - `concept.id` - `concepts.id` - `concepts.wikidata` - `concepts_count` - `corresponding_author_ids` - `corresponding_institution_ids` - `countries_distinct_count` - `default.search` - `display_name` - `display_name.search` - `doi` - `doi_starts_with` - `from_created_date` - `from_publication_date` - `fulltext.search` - `fulltext_origin` - `grants.award_id` - `grants.funder` - `has_abstract` - `has_doi` - `has_fulltext` - `has_ngrams` - `has_oa_accepted_or_published_version` - `has_oa_submitted_version` - `has_old_authors` - `has_orcid` - `has_pdf_url` - `has_pmcid` - `has_pmid` - `has_raw_affiliation_string` - `has_references` - `host_venue.id` - `ids.mag` - `ids.openalex` - `ids.pmcid` - `ids.pmid` - `institution.id` - `institutions.continent` - `institutions.country_code` - `institutions.id` - `institutions.is_global_south` - `institutions.ror` - `institutions.type` - `institutions_distinct_count` - `is_corresponding` - `is_oa` - `is_paratext` - `is_retracted` - `journal` - `keyword.search` - `keywords.keyword` - `language` - `locations.is_accepted` - `locations.is_oa` - `locations.is_published` - `locations.landing_page_url` - `locations.license` - `locations.source.has_issn` - `locations.source.host_institution_lineage` - `locations.source.host_organization` - `locations.source.host_organization_lineage` - `locations.source.id` - `locations.source.is_in_doaj` - `locations.source.is_oa` - `locations.source.issn` - `locations.source.publisher_lineage` - `locations.source.type` - `locations.version` - `locations_count` - `mag` - `oa_status` - `open_access.any_repository_has_fulltext` - `open_access.is_oa` - `open_access.oa_status` - `openalex` - `openalex_id` - `pmcid` - `pmid` - `primary_location.is_accepted` - `primary_location.is_oa` - `primary_location.is_published` - `primary_location.landing_page_url` - `primary_location.license` - `primary_location.source.has_issn` - `primary_location.source.host_institution_lineage` - `primary_location.source.host_organization` - `primary_location.source.host_organization_lineage` - `primary_location.source.id` - `primary_location.source.is_in_doaj` - `primary_location.source.is_oa` - `primary_location.source.issn` - `primary_location.source.publisher_lineage` - `primary_location.source.type` - `primary_location.version` - `publication_date` - `publication_year` - `raw_affiliation_string.search` - `referenced_works` - `referenced_works_count` - `related_to` - `repository` - `sustainable_development_goals.id` - `sustainable_development_goals.score` - `title.search` - `title_and_abstract.search` - `to_publication_date` - `to_updated_date` - `type` - `type_crossref` - `version`")] = None, user_agent : Annotated[Optional[Any], Field(description="[docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool)")] = None, mailto : Annotated[Optional[Any], Field(description="The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day. For best performance, add your email to all API requests The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`. Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).")] = None, **kwargs) -> WorksResponseSchema:  # noqa: E501
        """/works  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_works(api_key, cursor, group_by, page, per_page, sample, search, seed, select, sort, filter, user_agent, mailto, async_req=True)
        >>> result = thread.get()

        :param api_key:
        :type api_key: str
        :param cursor:
        :type cursor: str
        :param group_by:
        :type group_by: str
        :param page:
        :type page: int
        :param per_page:
        :type per_page: int
        :param sample:
        :type sample: int
        :param search:
        :type search: str
        :param seed:
        :type seed: object
        :param select:
        :type select: str
        :param sort:
        :type sort: str
        :param filter: Filter works by a specific field. See the [filter works](https://docs.openalex.org/api-entities/works/filter-works) documentation for more information. Valid filters are:   - `abstract.search` - `apc_list.currency` - `apc_list.provenance` - `apc_list.value` - `apc_list.value_usd` - `apc_paid.currency` - `apc_paid.provenance` - `apc_paid.value` - `apc_paid.value_usd` - `author.id` - `author.orcid` - `authors_count` - `authorships.author.id` - `authorships.author.orcid` - `authorships.countries` - `authorships.institutions.continent` - `authorships.institutions.country_code` - `authorships.institutions.id` - `authorships.institutions.is_global_south` - `authorships.institutions.lineage` - `authorships.institutions.ror` - `authorships.institutions.type` - `authorships.is_corresponding` - `best_oa_location.is_accepted` - `best_oa_location.is_oa` - `best_oa_location.is_published` - `best_oa_location.landing_page_url` - `best_oa_location.license` - `best_oa_location.source.host_organization` - `best_oa_location.source.host_organization_lineage` - `best_oa_location.source.id` - `best_oa_location.source.is_in_doaj` - `best_oa_location.source.is_oa` - `best_oa_location.source.issn` - `best_oa_location.source.type` - `best_oa_location.version` - `best_open_version` - `cited_by` - `cited_by_count` - `cited_by_percentile_year.max` - `cited_by_percentile_year.min` - `cites` - `concept.id` - `concepts.id` - `concepts.wikidata` - `concepts_count` - `corresponding_author_ids` - `corresponding_institution_ids` - `countries_distinct_count` - `default.search` - `display_name` - `display_name.search` - `doi` - `doi_starts_with` - `from_created_date` - `from_publication_date` - `fulltext.search` - `fulltext_origin` - `grants.award_id` - `grants.funder` - `has_abstract` - `has_doi` - `has_fulltext` - `has_ngrams` - `has_oa_accepted_or_published_version` - `has_oa_submitted_version` - `has_old_authors` - `has_orcid` - `has_pdf_url` - `has_pmcid` - `has_pmid` - `has_raw_affiliation_string` - `has_references` - `host_venue.id` - `ids.mag` - `ids.openalex` - `ids.pmcid` - `ids.pmid` - `institution.id` - `institutions.continent` - `institutions.country_code` - `institutions.id` - `institutions.is_global_south` - `institutions.ror` - `institutions.type` - `institutions_distinct_count` - `is_corresponding` - `is_oa` - `is_paratext` - `is_retracted` - `journal` - `keyword.search` - `keywords.keyword` - `language` - `locations.is_accepted` - `locations.is_oa` - `locations.is_published` - `locations.landing_page_url` - `locations.license` - `locations.source.has_issn` - `locations.source.host_institution_lineage` - `locations.source.host_organization` - `locations.source.host_organization_lineage` - `locations.source.id` - `locations.source.is_in_doaj` - `locations.source.is_oa` - `locations.source.issn` - `locations.source.publisher_lineage` - `locations.source.type` - `locations.version` - `locations_count` - `mag` - `oa_status` - `open_access.any_repository_has_fulltext` - `open_access.is_oa` - `open_access.oa_status` - `openalex` - `openalex_id` - `pmcid` - `pmid` - `primary_location.is_accepted` - `primary_location.is_oa` - `primary_location.is_published` - `primary_location.landing_page_url` - `primary_location.license` - `primary_location.source.has_issn` - `primary_location.source.host_institution_lineage` - `primary_location.source.host_organization` - `primary_location.source.host_organization_lineage` - `primary_location.source.id` - `primary_location.source.is_in_doaj` - `primary_location.source.is_oa` - `primary_location.source.issn` - `primary_location.source.publisher_lineage` - `primary_location.source.type` - `primary_location.version` - `publication_date` - `publication_year` - `raw_affiliation_string.search` - `referenced_works` - `referenced_works_count` - `related_to` - `repository` - `sustainable_development_goals.id` - `sustainable_development_goals.score` - `title.search` - `title_and_abstract.search` - `to_publication_date` - `to_updated_date` - `type` - `type_crossref` - `version`
        :type filter: object
        :param user_agent: [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool)
        :type user_agent: object
        :param mailto: The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day. For best performance, add your email to all API requests The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`. Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
        :type mailto: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WorksResponseSchema
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_works_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_works_with_http_info(api_key, cursor, group_by, page, per_page, sample, search, seed, select, sort, filter, user_agent, mailto, **kwargs)  # noqa: E501

    @validate_arguments
    def get_works_with_http_info(self, api_key : Optional[StrictStr] = None, cursor : Optional[StrictStr] = None, group_by : Optional[StrictStr] = None, page : Optional[StrictInt] = None, per_page : Optional[StrictInt] = None, sample : Optional[StrictInt] = None, search : Optional[StrictStr] = None, seed : Optional[Any] = None, select : Optional[StrictStr] = None, sort : Optional[StrictStr] = None, filter : Annotated[Optional[Any], Field(description="Filter works by a specific field. See the [filter works](https://docs.openalex.org/api-entities/works/filter-works) documentation for more information. Valid filters are:   - `abstract.search` - `apc_list.currency` - `apc_list.provenance` - `apc_list.value` - `apc_list.value_usd` - `apc_paid.currency` - `apc_paid.provenance` - `apc_paid.value` - `apc_paid.value_usd` - `author.id` - `author.orcid` - `authors_count` - `authorships.author.id` - `authorships.author.orcid` - `authorships.countries` - `authorships.institutions.continent` - `authorships.institutions.country_code` - `authorships.institutions.id` - `authorships.institutions.is_global_south` - `authorships.institutions.lineage` - `authorships.institutions.ror` - `authorships.institutions.type` - `authorships.is_corresponding` - `best_oa_location.is_accepted` - `best_oa_location.is_oa` - `best_oa_location.is_published` - `best_oa_location.landing_page_url` - `best_oa_location.license` - `best_oa_location.source.host_organization` - `best_oa_location.source.host_organization_lineage` - `best_oa_location.source.id` - `best_oa_location.source.is_in_doaj` - `best_oa_location.source.is_oa` - `best_oa_location.source.issn` - `best_oa_location.source.type` - `best_oa_location.version` - `best_open_version` - `cited_by` - `cited_by_count` - `cited_by_percentile_year.max` - `cited_by_percentile_year.min` - `cites` - `concept.id` - `concepts.id` - `concepts.wikidata` - `concepts_count` - `corresponding_author_ids` - `corresponding_institution_ids` - `countries_distinct_count` - `default.search` - `display_name` - `display_name.search` - `doi` - `doi_starts_with` - `from_created_date` - `from_publication_date` - `fulltext.search` - `fulltext_origin` - `grants.award_id` - `grants.funder` - `has_abstract` - `has_doi` - `has_fulltext` - `has_ngrams` - `has_oa_accepted_or_published_version` - `has_oa_submitted_version` - `has_old_authors` - `has_orcid` - `has_pdf_url` - `has_pmcid` - `has_pmid` - `has_raw_affiliation_string` - `has_references` - `host_venue.id` - `ids.mag` - `ids.openalex` - `ids.pmcid` - `ids.pmid` - `institution.id` - `institutions.continent` - `institutions.country_code` - `institutions.id` - `institutions.is_global_south` - `institutions.ror` - `institutions.type` - `institutions_distinct_count` - `is_corresponding` - `is_oa` - `is_paratext` - `is_retracted` - `journal` - `keyword.search` - `keywords.keyword` - `language` - `locations.is_accepted` - `locations.is_oa` - `locations.is_published` - `locations.landing_page_url` - `locations.license` - `locations.source.has_issn` - `locations.source.host_institution_lineage` - `locations.source.host_organization` - `locations.source.host_organization_lineage` - `locations.source.id` - `locations.source.is_in_doaj` - `locations.source.is_oa` - `locations.source.issn` - `locations.source.publisher_lineage` - `locations.source.type` - `locations.version` - `locations_count` - `mag` - `oa_status` - `open_access.any_repository_has_fulltext` - `open_access.is_oa` - `open_access.oa_status` - `openalex` - `openalex_id` - `pmcid` - `pmid` - `primary_location.is_accepted` - `primary_location.is_oa` - `primary_location.is_published` - `primary_location.landing_page_url` - `primary_location.license` - `primary_location.source.has_issn` - `primary_location.source.host_institution_lineage` - `primary_location.source.host_organization` - `primary_location.source.host_organization_lineage` - `primary_location.source.id` - `primary_location.source.is_in_doaj` - `primary_location.source.is_oa` - `primary_location.source.issn` - `primary_location.source.publisher_lineage` - `primary_location.source.type` - `primary_location.version` - `publication_date` - `publication_year` - `raw_affiliation_string.search` - `referenced_works` - `referenced_works_count` - `related_to` - `repository` - `sustainable_development_goals.id` - `sustainable_development_goals.score` - `title.search` - `title_and_abstract.search` - `to_publication_date` - `to_updated_date` - `type` - `type_crossref` - `version`")] = None, user_agent : Annotated[Optional[Any], Field(description="[docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool)")] = None, mailto : Annotated[Optional[Any], Field(description="The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day. For best performance, add your email to all API requests The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`. Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """/works  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_works_with_http_info(api_key, cursor, group_by, page, per_page, sample, search, seed, select, sort, filter, user_agent, mailto, async_req=True)
        >>> result = thread.get()

        :param api_key:
        :type api_key: str
        :param cursor:
        :type cursor: str
        :param group_by:
        :type group_by: str
        :param page:
        :type page: int
        :param per_page:
        :type per_page: int
        :param sample:
        :type sample: int
        :param search:
        :type search: str
        :param seed:
        :type seed: object
        :param select:
        :type select: str
        :param sort:
        :type sort: str
        :param filter: Filter works by a specific field. See the [filter works](https://docs.openalex.org/api-entities/works/filter-works) documentation for more information. Valid filters are:   - `abstract.search` - `apc_list.currency` - `apc_list.provenance` - `apc_list.value` - `apc_list.value_usd` - `apc_paid.currency` - `apc_paid.provenance` - `apc_paid.value` - `apc_paid.value_usd` - `author.id` - `author.orcid` - `authors_count` - `authorships.author.id` - `authorships.author.orcid` - `authorships.countries` - `authorships.institutions.continent` - `authorships.institutions.country_code` - `authorships.institutions.id` - `authorships.institutions.is_global_south` - `authorships.institutions.lineage` - `authorships.institutions.ror` - `authorships.institutions.type` - `authorships.is_corresponding` - `best_oa_location.is_accepted` - `best_oa_location.is_oa` - `best_oa_location.is_published` - `best_oa_location.landing_page_url` - `best_oa_location.license` - `best_oa_location.source.host_organization` - `best_oa_location.source.host_organization_lineage` - `best_oa_location.source.id` - `best_oa_location.source.is_in_doaj` - `best_oa_location.source.is_oa` - `best_oa_location.source.issn` - `best_oa_location.source.type` - `best_oa_location.version` - `best_open_version` - `cited_by` - `cited_by_count` - `cited_by_percentile_year.max` - `cited_by_percentile_year.min` - `cites` - `concept.id` - `concepts.id` - `concepts.wikidata` - `concepts_count` - `corresponding_author_ids` - `corresponding_institution_ids` - `countries_distinct_count` - `default.search` - `display_name` - `display_name.search` - `doi` - `doi_starts_with` - `from_created_date` - `from_publication_date` - `fulltext.search` - `fulltext_origin` - `grants.award_id` - `grants.funder` - `has_abstract` - `has_doi` - `has_fulltext` - `has_ngrams` - `has_oa_accepted_or_published_version` - `has_oa_submitted_version` - `has_old_authors` - `has_orcid` - `has_pdf_url` - `has_pmcid` - `has_pmid` - `has_raw_affiliation_string` - `has_references` - `host_venue.id` - `ids.mag` - `ids.openalex` - `ids.pmcid` - `ids.pmid` - `institution.id` - `institutions.continent` - `institutions.country_code` - `institutions.id` - `institutions.is_global_south` - `institutions.ror` - `institutions.type` - `institutions_distinct_count` - `is_corresponding` - `is_oa` - `is_paratext` - `is_retracted` - `journal` - `keyword.search` - `keywords.keyword` - `language` - `locations.is_accepted` - `locations.is_oa` - `locations.is_published` - `locations.landing_page_url` - `locations.license` - `locations.source.has_issn` - `locations.source.host_institution_lineage` - `locations.source.host_organization` - `locations.source.host_organization_lineage` - `locations.source.id` - `locations.source.is_in_doaj` - `locations.source.is_oa` - `locations.source.issn` - `locations.source.publisher_lineage` - `locations.source.type` - `locations.version` - `locations_count` - `mag` - `oa_status` - `open_access.any_repository_has_fulltext` - `open_access.is_oa` - `open_access.oa_status` - `openalex` - `openalex_id` - `pmcid` - `pmid` - `primary_location.is_accepted` - `primary_location.is_oa` - `primary_location.is_published` - `primary_location.landing_page_url` - `primary_location.license` - `primary_location.source.has_issn` - `primary_location.source.host_institution_lineage` - `primary_location.source.host_organization` - `primary_location.source.host_organization_lineage` - `primary_location.source.id` - `primary_location.source.is_in_doaj` - `primary_location.source.is_oa` - `primary_location.source.issn` - `primary_location.source.publisher_lineage` - `primary_location.source.type` - `primary_location.version` - `publication_date` - `publication_year` - `raw_affiliation_string.search` - `referenced_works` - `referenced_works_count` - `related_to` - `repository` - `sustainable_development_goals.id` - `sustainable_development_goals.score` - `title.search` - `title_and_abstract.search` - `to_publication_date` - `to_updated_date` - `type` - `type_crossref` - `version`
        :type filter: object
        :param user_agent: [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool)
        :type user_agent: object
        :param mailto: The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day. For best performance, add your email to all API requests The email can be either in the query string, like `mailto:example@domain.com`, or in the User-Agent request header, like `User-Agent: my-app (mailto:example@domain.com)`. Read more about the polite pool at [docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool).
        :type mailto: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WorksResponseSchema, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'api_key',
            'cursor',
            'group_by',
            'page',
            'per_page',
            'sample',
            'search',
            'seed',
            'select',
            'sort',
            'filter',
            'user_agent',
            'mailto'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_works" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('api_key') is not None:  # noqa: E501
            _query_params.append(('api_key', _params['api_key']))

        if _params.get('cursor') is not None:  # noqa: E501
            _query_params.append(('cursor', _params['cursor']))

        if _params.get('group_by') is not None:  # noqa: E501
            _query_params.append(('group_by', _params['group_by']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('per_page') is not None:  # noqa: E501
            _query_params.append(('per_page', _params['per_page']))

        if _params.get('sample') is not None:  # noqa: E501
            _query_params.append(('sample', _params['sample']))

        if _params.get('search') is not None:  # noqa: E501
            _query_params.append(('search', _params['search']))

        if _params.get('seed') is not None:  # noqa: E501
            _query_params.append(('seed', _params['seed']))

        if _params.get('select') is not None:  # noqa: E501
            _query_params.append(('select', _params['select']))

        if _params.get('sort') is not None:  # noqa: E501
            _query_params.append(('sort', _params['sort']))

        if _params.get('filter') is not None:  # noqa: E501
            _query_params.append(('filter', _params['filter']))

        if _params.get('mailto') is not None:  # noqa: E501
            _query_params.append(('mailto', _params['mailto']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['user_agent'] is not None:
            _header_params['User-Agent'] = _params['user_agent']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "WorksResponseSchema",
            '403': "ErrorMessage",
        }

        return self.api_client.call_api(
            '/works', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
